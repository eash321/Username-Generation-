import csv
import datetime
from collections import defaultdict

# Define file name for storing expenses
EXPENSE_FILE = 'expenses.csv'

# Predefined expense categories
CATEGORIES = ['Food', 'Transportation', 'Entertainment', 'Utilities', 'Other']

def add_expense():
    """
    Prompts the user to enter an expense record and appends it to the CSV file.
    The user can enter the date (or leave blank for today's date), amount,
    description, and select a category from the list.
    """
    try:
        date_input = input("Enter date (YYYY-MM-DD) or leave blank for today: ").strip()
        # Use today's date if the user does not enter a date
        if not date_input:
            date = datetime.date.today()
        else:
            date = datetime.datetime.strptime(date_input, "%Y-%m-%d").date()

        amount = float(input("Enter expense amount: "))
        description = input("Enter expense description: ").strip()
        
        # Display category options
        print("Select category:")
        for i, cat in enumerate(CATEGORIES, start=1):
            print(f"{i}. {cat}")
        cat_choice = int(input("Enter category number: "))
        
        # Validate category choice
        if cat_choice < 1 or cat_choice > len(CATEGORIES):
            raise ValueError("Invalid category selection.")
        category = CATEGORIES[cat_choice - 1]
        
        # Append expense data to the CSV file
        with open(EXPENSE_FILE, 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([date, amount, description, category])
        print("Expense recorded successfully.")
    
    except Exception as e:
        print(f"Error: {e}")

def load_expenses():
    """
    Loads expenses from the CSV file.
    
    Returns:
        A list of expense dictionaries, where each dictionary contains:
        'date', 'amount', 'description', and 'category'.
    """
    expenses = []
    try:
        with open(EXPENSE_FILE, 'r', newline='') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if len(row) != 4:
                    continue  # Skip rows with missing data
                date_str, amount_str, description, category = row
                expense = {
                    'date': datetime.datetime.strptime(date_str, "%Y-%m-%d").date(),
                    'amount': float(amount_str),
                    'description': description,
                    'category': category
                }
                expenses.append(expense)
    except FileNotFoundError:
        # File doesn't exist yet; return empty list
        pass
    except Exception as e:
        print(f"Error loading expenses: {e}")
    return expenses

def monthly_summary():
    """
    Computes and displays the total expenses for each month.
    """
    expenses = load_expenses()
    summary = defaultdict(float)
    
    # Group expenses by month (YYYY-MM)
    for exp in expenses:
        month_key = exp['date'].strftime("%Y-%m")
        summary[month_key] += exp['amount']
    
    print("\nMonthly Summary:")
    if summary:
        for month, total in summary.items():
            print(f"{month}: ${total:.2f}")
    else:
        print("No expense data available.")

def category_summary():
    """
    Computes and displays the total expenses for each category.
    """
    expenses = load_expenses()
    summary = defaultdict(float)
    
    # Group expenses by category
    for exp in expenses:
        summary[exp['category']] += exp['amount']
    
    print("\nCategory-wise Summary:")
    if summary:
        for category, total in summary.items():
            print(f"{category}: ${total:.2f}")
    else:
        print("No expense data available.")

def main():
    """
    Main function that runs the Expense Tracker system.
    Displays a menu for the user to add expenses or view summaries.
    """
    print("Welcome to the Expense Tracker")
    
    while True:
        print("\nMenu:")
        print("1. Add Expense")
        print("2. View Monthly Summary")
        print("3. View Category-wise Summary")
        print("4. Exit")
        
        try:
            choice = int(input("Enter your choice (1-4): "))
            if choice == 1:
                add_expense()
            elif choice == 2:
                monthly_summary()
            elif choice == 3:
                category_summary()
            elif choice == 4:
                print("Exiting Expense Tracker. Goodbye!")
                break
            else:
                print("Invalid choice. Please select a valid option.")
        except Exception as e:
            print(f"Error: {e}")

if __name__ == "__main__":
    main()
